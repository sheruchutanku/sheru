resource "azurerm_resource_group" "rg" {
  name     = "tutorial"
  location = "East US2"
}

resource "azurerm_kubernetes_cluster" "aks" {
  name                = "aks"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
  dns_prefix          = "myakscluster"

  default_node_pool {
    name       = "default"
    node_count = 1
    vm_size    = "Standard_B2s"
  }
  identity {
    type = "SystemAssigned"
  }

   tags = {
    Environment = "Production"
  }

  // These two are required!
  oidc_issuer_enabled       = true
  workload_identity_enabled = true
 depends_on = [azurerm_resource_group.rg]

}

output "aks_client_id" {
  value = azurerm_kubernetes_cluster.aks.kubelet_identity[0].client_id
}

output "aks_object_id" {
  value = azurerm_kubernetes_cluster.aks.kubelet_identity[0].object_id
}


resource "azurerm_container_registry" "acr" {
  name                = "acr47"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
  sku                 = "Standard"
  admin_enabled       = false # false
 depends_on = [azurerm_resource_group.rg,azurerm_kubernetes_cluster.aks]

}

resource "azurerm_role_assignment" "role_acrpull" {
  scope                            = azurerm_container_registry.acr.id
  role_definition_name             = "AcrPull"
  principal_id                     = azurerm_kubernetes_cluster.aks.kubelet_identity[0].object_id
  skip_service_principal_aad_check = true
}

resource "azurerm_role_assignment" "role_acrpush" {
  scope                            = azurerm_container_registry.acr.id
  role_definition_name             = "AcrPush"
  principal_id                     = azurerm_kubernetes_cluster.aks.kubelet_identity[0].object_id
  skip_service_principal_aad_check = true
}

#######################################################################################################
#############2nd Method
####################################################################################################
locals {
  identity_name = "example_worker"
  resource_group_name = "tutorial"
  location = "eastus2"
  namespace = "default"
  service_account_name = "test-service-account"
}

resource "azurerm_resource_group" "example" {
  name     = local.resource_group_name
  location = "eastus2"
}


resource "azurerm_kubernetes_cluster" "example" {
  name                = "aks1"
  location            = local.location
  resource_group_name = local.resource_group_name
  dns_prefix          = "aks1"
  default_node_pool {
    name       = "default"
    node_count = 1
    vm_size    = "Standard_B2s"
  }
  identity {
    type = "SystemAssigned"
  }
  tags = {
    Environment = "Production"
  }
   web_app_routing {
    dns_zone_ids = []
    # default_nginx_controller = "External" # None, Internal, External and AnnotationControlled. It defaults to AnnotationControlled
  }
  // These two are required!
  oidc_issuer_enabled       = true
  workload_identity_enabled = true
 depends_on = [azurerm_resource_group.example]

}


######kubelet-identity##
data "azurerm_user_assigned_identity" "test" {
  name                = "${azurerm_kubernetes_cluster.example.name}-agentpool"
  resource_group_name = azurerm_kubernetes_cluster.example.node_resource_group
  depends_on = [azurerm_resource_group.example,azurerm_kubernetes_cluster.example]
}
/*

resource "azurerm_container_registry" "acr" {
  name                     = "acr42001"
  resource_group_name      = azurerm_resource_group.example.name
  location                 = azurerm_resource_group.example.location
  sku                      = "Standard"
  admin_enabled            = false
  depends_on = [azurerm_resource_group.example]
}

resource "azurerm_role_assignment" "acrpull_role" {
  scope                            = azurerm_container_registry.acr.id
  role_definition_name             = "AcrPull"
  principal_id                     = data.azurerm_user_assigned_identity.test.principal_id
  skip_service_principal_aad_check = true
}

resource "azurerm_role_assignment" "acrpush_role" {
  scope                            = azurerm_container_registry.acr.id
  role_definition_name             = "AcrPush"
  principal_id                     = data.azurerm_user_assigned_identity.test.principal_id
  skip_service_principal_aad_check = true
}



resource "azurerm_storage_account" "storage" {
  name                     = "sheru420"         # must be globally unique, 3-24 lowercase letters/numbers
  resource_group_name      = azurerm_resource_group.example.name
  location                 = azurerm_resource_group.example.location
  account_tier             = "Standard"
  account_replication_type = "LRS"
  account_kind             = "StorageV2"
#  allow_blob_public_access = false

  identity {
    type = "SystemAssigned"
  }
}

resource "azurerm_storage_share" "fileshare" {
  name                 = "myshare"
  storage_account_name = azurerm_storage_account.storage.name
  quota                = 5  # in GB
}

*/
